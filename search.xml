<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows下搭建Hexo+Github详细教程</title>
    <url>/post/b79fb44d.html</url>
    <content><![CDATA[<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>在Windows环境下安装Node.js非常简单，仅须到<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网下载</a>安装文件并执行即可完成安装，其中LTS是长期支持版，Current为最新版，但是新版一般都在开发测试阶段，还不稳定。建议选择LTS版本。</p>
<p><img src="/post/b79fb44d/00001.jpg" alt="00001"></p>
<p>根据笔记本配置，选择对应版本，我的是Windows64位LTS，直接下载后执行，默认下一步安装即可，不需要配置环境变量。</p>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>访问<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>官网，下载对应系统的版本。</p>
<p><img src="/post/b79fb44d/Git.jpg" alt="Git"></p>
<p>这里选择Windows，下载完成后执行，一直下一步安装完毕。验证：通过在命令行输入git version查看是否安装成功，有输出版本号说明安装成功。</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200606202532.png" alt="QQ截图20200606202532"></p>
<p>因是Windows图形界面，鼠标右键桌面菜单中就多了Git GUI Here和Git Bash Here两个选项，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。</p>
<h1 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h1><p>Hexo是一个快速，简洁且高效的博客框架。Hexo使用Markdown(或其他渲染引擎)解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/00001%E5%AE%89%E8%A3%85hexo.jpg" alt="00001安装hexo"></p>
<p><img src="/post/b79fb44d/00002.jpg" alt="00002"></p>
<p>第一句是安装Hexo，第二句是安装Hexo部署到Git Page的deployer依赖包，两个都需要安装。</p>
<p>创建Hexo文件夹</p>
<p>以上两步安装完成后，在自己的D盘建立目录(如D:\Blog\Hexo)，直接在D:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/00005.jpg" alt="00005"></p>
<p>安装Hexo完成后，Hexo将会在指定文件夹中新建所需的文件。Hexo文件夹下的目录如下：</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200529145406.jpg" alt="QQ截图20200529145406"></p>
<p>本地查看效果</p>
<p>执行下面语句，执行完即可登录Localhost:4000，查看效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/00006.jpg" alt="00006"></p>
<p><img src="/post/b79fb44d/00007.jpg" alt="00007"></p>
<p>登录Localhost:4000，即可看到本地的效果如下：</p>
<p><img src="/post/b79fb44d/SSS.jpg" alt="SSS"></p>
<h1 id="部署到GitHub-Page上"><a href="#部署到GitHub-Page上" class="headerlink" title="部署到GitHub Page上"></a>部署到GitHub Page上</h1><p>那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。如何让别人也看到我们的博客，就需要把本地的博客发布到服务器上，而Github Pages就帮我们完成了这件事情。但是Github Pages的代码都是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。</p>
<h2 id="一、注册GitHub账户"><a href="#一、注册GitHub账户" class="headerlink" title="一、注册GitHub账户"></a>一、注册GitHub账户</h2><p>访问<a href="https://github.com/" target="_blank" rel="noopener">Github首页</a></p>
<p>点击右上角的Sign Up，注册自己的账户</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200529150731.jpg" alt="QQ截图20200529150731"></p>
<h2 id="二、创建代码库"><a href="#二、创建代码库" class="headerlink" title="二、创建代码库"></a>二、创建代码库</h2><p>注册完成后，我们就创建一个我们自己的Github Pages项目。点击New repository，按图中所示填写。</p>
<p><img src="/post/b79fb44d/%E5%BB%BA%E7%AB%8B%E4%BB%93%E5%BA%93.jpg" alt="建立仓库"></p>
<h2 id="三、配置SSH密钥"><a href="#三、配置SSH密钥" class="headerlink" title="三、配置SSH密钥"></a>三、配置SSH密钥</h2><p>配置Github的SSH密钥可以让本地Git项目与远程的Github建立联系，让我们在本地写了代码之后直接通过Git操作就可以实现本地代码库与Github代码库同步。操作如下：</p>
<h3 id="第一步、查看是否存在SSH密钥-Keys"><a href="#第一步、查看是否存在SSH密钥-Keys" class="headerlink" title="第一步、查看是否存在SSH密钥(Keys)"></a>第一步、查看是否存在SSH密钥(Keys)</h3><p>首先，我们需要查看本机是否存在SSH Keys，打开Git Bash Here并运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E6%9C%89SSHkeys.jpg" alt="检查是否有SSHkeys"></p>
<p>检查你本机用户Home目录下是否存在.ssh目录</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200619160146.jpg" alt="QQ截图20200619160146"></p>
<p>若你的本机已经存在SSH公钥和私钥，则可以略过第二步，直接进入第三步，若无，则运行第二步操作。</p>
<h3 id="第二步、创建一对新的SSH密钥-Keys"><a href="#第二步、创建一对新的SSH密钥-Keys" class="headerlink" title="第二步、创建一对新的SSH密钥(Keys)"></a>第二步、创建一对新的SSH密钥(Keys)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment">#这将按照你提供的邮箱地址，创建一对密钥</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/d/Users/Administrator/.ssh/id_rsa)：[Press enter]</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200617144623.jpg" alt="QQ截图20200617144623"></p>
<p>直接回车，则将密钥按默认文件进行存储。此时也可以输入指定的文件名，比如(/d/Users/Administrator/.ssh/id_rsa)。</p>
<p>接着，根据提示，你需要输入密码和确认密码(在这里其实可以不用密码，就是在输密码的地方，你可以直接按回车，所谓最安全的密码，就是没有密码，嘎嘎)。相关提示如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase （empty <span class="keyword">for</span> no passphrase）：[Type a passphrase]</span><br><span class="line">Enter same passphrase again：[Type passphrase again]</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200617144715.jpg" alt="QQ截图20200617144715"></p>
<p>输入完成之后，屏幕会显示如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /d/Users/Administrator/.ssh/id_rsa</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /d/Users/Administrator/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:td0Y4uxiJieQDM6CYFrlJQGj8VCXx7chYWUXD0vXiF8 your_email@example.com</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200617144824.jpg" alt="QQ截图20200617144824"></p>
<h3 id="第三步、在Github账户中添加你的公钥"><a href="#第三步、在Github账户中添加你的公钥" class="headerlink" title="第三步、在Github账户中添加你的公钥"></a>第三步、在Github账户中添加你的公钥</h3><p>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中，或者打开(/d/Users/Administrator/.ssh/id_rsa.pub)复制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>接着：</p>
<p>1.登陆Github，进入你的Account Settings</p>
<p><img src="/post/b79fb44d/Settings.jpg" alt="Settings"></p>
<p>2.选择SSH Keys</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200529170424.jpg" alt="QQ截图20200529170424"></p>
<p>3.粘贴密钥，添加即可</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200529170454.jpg" alt="QQ截图20200529170454"></p>
<p><img src="/post/b79fb44d/%E6%B7%BB%E5%8A%A0%E5%AF%86%E9%92%A5.jpg" alt="添加密钥"></p>
<p><img src="/post/b79fb44d/%E5%85%AC%E9%92%A5.jpg" alt="公钥"></p>
<h3 id="第四步、测试"><a href="#第四步、测试" class="headerlink" title="第四步、测试"></a>第四步、测试</h3><p>可以输入下面的命令，看看设置是否成功，<a href="git@github.com">git@github.com</a>的部分不要修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果是下面的反馈：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>

<p>不要紧张，输入yes就好。</p>
<h3 id="第五步、设置用户信息"><a href="#第五步、设置用户信息" class="headerlink" title="第五步、设置用户信息"></a>第五步、设置用户信息</h3><p>现在你已经可以通过SSH链接到Github了，还有一些个人信息需要完善的。Git会根据用户的名字和邮箱来记录提交。Github也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好来取，而不是Github的昵称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"masslover"</span>//用户名</span><br><span class="line">$ git config --global user.email  <span class="string">"masslover009@163.com"</span>//填写自己的邮箱</span><br></pre></td></tr></table></figure>

<h3 id="第六步、SSH-Key配置成功"><a href="#第六步、SSH-Key配置成功" class="headerlink" title="第六步、SSH Key配置成功"></a>第六步、SSH Key配置成功</h3><p>本机已成功连接到Github。</p>
<h2 id="四、将本地的Hexo文件更新到GitHub的库中"><a href="#四、将本地的Hexo文件更新到GitHub的库中" class="headerlink" title="四、将本地的Hexo文件更新到GitHub的库中"></a>四、将本地的Hexo文件更新到GitHub的库中</h2><h3 id="第一步、登陆Github打开自己的项目Username-github-io"><a href="#第一步、登陆Github打开自己的项目Username-github-io" class="headerlink" title="第一步、登陆Github打开自己的项目Username.github.io"></a>第一步、登陆Github打开自己的项目Username.github.io</h3><p><img src="/post/b79fb44d/%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE.jpg" alt="自己的项目"></p>
<h3 id="第二步、打开之后，点击SSH，选择SSH类型地址并复制地址"><a href="#第二步、打开之后，点击SSH，选择SSH类型地址并复制地址" class="headerlink" title="第二步、打开之后，点击SSH，选择SSH类型地址并复制地址"></a>第二步、打开之后，点击SSH，选择SSH类型地址并复制地址</h3><p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200529174037.jpg" alt="QQ截图20200529174037"></p>
<h3 id="第三步、打开你一开始创建的Hexo文件夹-如D-Blog-Hexo-，用记事本打开文件夹下的-config-yml站点配置文件"><a href="#第三步、打开你一开始创建的Hexo文件夹-如D-Blog-Hexo-，用记事本打开文件夹下的-config-yml站点配置文件" class="headerlink" title="第三步、打开你一开始创建的Hexo文件夹(如D:\Blog\Hexo)，用记事本打开文件夹下的_config.yml站点配置文件"></a>第三步、打开你一开始创建的Hexo文件夹(如D:\Blog\Hexo)，用记事本打开文件夹下的_config.yml站点配置文件</h3><p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200618163848.jpg" alt="QQ截图20200618163848"></p>
<h3 id="第四步、在配置文件里作如下修改，保存"><a href="#第四步、在配置文件里作如下修改，保存" class="headerlink" title="第四步、在配置文件里作如下修改，保存"></a>第四步、在配置文件里作如下修改，保存</h3><p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200618165300.jpg" alt="QQ截图20200618165300"></p>
<h3 id="第五步、在Hexo文件夹下执行："><a href="#第五步、在Hexo文件夹下执行：" class="headerlink" title="第五步、在Hexo文件夹下执行："></a>第五步、在Hexo文件夹下执行：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>或直接执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<p>执行完之后会让你输入Github的账号和密码，输入完后就可以登陆我们自己部署在Github Pages服务器上的博客了。对应的地址是Username.github.io(我的是：masslover.github.io)。</p>
<p>假若这时候，报错 ERROR Deployer not found：git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>这样，你再执行hexo g -d，你的博客就部署到Github上面了。</p>
<h3 id="第六步、在浏览器输入自己的主页地址"><a href="#第六步、在浏览器输入自己的主页地址" class="headerlink" title="第六步、在浏览器输入自己的主页地址"></a>第六步、在浏览器输入自己的主页地址</h3><p>在浏览器上输入Github Pager为我们生成的外链(例如我的是：<a href="https://masslover.github.io/">https://masslover.github.io，而你只需要把masslover换成你自己的github用户名即可</a>这样就可以看到你自己的博客了)</p>
<p>当然，每一个人都可以通过这个地址访问到你的博客了。</p>
<p><img src="/post/b79fb44d/SSS.jpg" alt="SSS"></p>
<h1 id="美化自己的博客"><a href="#美化自己的博客" class="headerlink" title="美化自己的博客"></a>美化自己的博客</h1><p>那么现在我们的博客已经挂在了Github服务器上面，别人已经可以通过地址来访问我们的博客了，但是我们这时就有了新的需求，就是自己的博客并不好看，那怎么办呢？这很简单，要知道很多前端开发者在Hexo框架下开发了很多的主题给我们使用，我们只需要把他们的主题克隆过来，然后通过修改配置文件即可达到我们所需要的效果。</p>
<p>那么我们应该怎么修改呢？</p>
<h2 id="一、进入Hexo的官网主题专栏"><a href="#一、进入Hexo的官网主题专栏" class="headerlink" title="一、进入Hexo的官网主题专栏"></a>一、进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo的官网主题专栏</a></h2><p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200618174432.jpg" alt="QQ截图20200618174432"></p>
<h2 id="二、挑选我们喜欢的主题"><a href="#二、挑选我们喜欢的主题" class="headerlink" title="二、挑选我们喜欢的主题"></a>二、挑选我们喜欢的主题</h2><p>可以看到有很多主题供我们选择，我们只要选择喜欢的主题点击进去，然后进入到它的Github地址，只需把这个地址复制下来(例如我选择的是：hexo-theme-next这个主题)</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200710125342.jpg" alt="QQ截图20200710125342"></p>
<h2 id="三、克隆主题"><a href="#三、克隆主题" class="headerlink" title="三、克隆主题"></a>三、克隆主题</h2><p>再打开Hexo文件夹下的themes目录(D:\Blog\Hexo\themes)，右键Git Bash Here，在命令行输入下载命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题地址)</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200618180039.jpg" alt="QQ截图20200618180039"></p>
<h2 id="四、修改Hexo配置文件"><a href="#四、修改Hexo配置文件" class="headerlink" title="四、修改Hexo配置文件"></a>四、修改Hexo配置文件</h2><p>下载完成后，打开Hexo文件夹下的配置文件_config.yml</p>
<p>修改参数为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme：hexo-theme-next</span><br></pre></td></tr></table></figure>

<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200619101946.jpg" alt="QQ截图20200619101946"></p>
<h2 id="五、部署主题，本地查看效果"><a href="#五、部署主题，本地查看效果" class="headerlink" title="五、部署主题，本地查看效果"></a>五、部署主题，本地查看效果</h2><p>返回Hexo目录，右键Git Bash Here，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>打开浏览器，输入<a href="https://masslover.github.io/">http://localhost:4000/</a>即可看到我们的主题已经更换了。</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200619103007.jpg" alt="QQ截图20200619103007"></p>
<h2 id="六、如果效果满意，就将它部署到GitHub上"><a href="#六、如果效果满意，就将它部署到GitHub上" class="headerlink" title="六、如果效果满意，就将它部署到GitHub上"></a>六、如果效果满意，就将它部署到GitHub上</h2><p>打开Hexo文件夹，右键Git Bash Here，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean（必须要做这一步，否则有时因缓存问题，服务器更新不了主题）</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<h2 id="七、打开自己的主页，即可看到修改后的效果"><a href="#七、打开自己的主页，即可看到修改后的效果" class="headerlink" title="七、打开自己的主页，即可看到修改后的效果"></a>七、打开自己的主页，即可看到修改后的效果</h2><p>更多修改效果请查看对应主题的说明文档。</p>
<h1 id="在博客写文章"><a href="#在博客写文章" class="headerlink" title="在博客写文章"></a>在博客写文章</h1><h2 id="一、用Hexo发表新文章"><a href="#一、用Hexo发表新文章" class="headerlink" title="一、用Hexo发表新文章"></a>一、用Hexo发表新文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo n <span class="string">"文章标题"</span></span><br></pre></td></tr></table></figure>

<p>其中 我的家 为文章标题，执行命令 hexo n 我的家 后，会在项目\Hexo\source_post中生成 我的家.md 文件，用编辑器打开编写即可。</p>
<p><img src="/post/b79fb44d/QQ%E6%88%AA%E5%9B%BE20200718202219.jpg" alt="QQ截图20200718202219"></p>
<p>写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo d <span class="comment"># 部署 # 可与 hexo g 合并为 hexo d -g</span></span><br></pre></td></tr></table></figure>

<h2 id="二、用Markdown写文章"><a href="#二、用Markdown写文章" class="headerlink" title="二、用Markdown写文章"></a>二、用Markdown写文章</h2><p>我们注意到在\Hexo\source_post文件夹下存放着的文章，它们的格式都是以.md格式结尾的。没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，写完后保存。</p>
<p>只要执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>推送到我们的Github仓库即可。</p>
<p>那么什么是Markdown?</p>
<p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">Markdown</a>是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
<p>Markdown有什么优点？</p>
<ul>
<li>专注你的文字内容而不是排版样式，安心写作。</li>
<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li>
<li>可读、直观、学习成本低。</li>
</ul>
<p>我该用什么工具？</p>
<p>Windows下可以使用Typora或MarkdownPad2。</p>
<p>在Mac OS上，我建议你用Mou这款免费且十分好用的Markdown编辑器。</p>
<p>我该用什么工具？</p>
<p>Windows下可以使用Typora或MarkdownPad2。</p>
<p>在Mac OS上，我建议你用Mou这款免费且十分好用的Markdown编辑器。</p>
<p>Web端上，我强烈推荐“简书”这款产品。</p>
<p>关于Markdown的更多资料可以查看如下：</p>
<p><a href="https://sspai.com/post/25137" target="_blank" rel="noopener">认识与入门Markdown</a></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>按照上述操作，开始建立你自己的博客吧！用博客展现自己的能力和分享自己的心得，你会交到很多志同道合的朋友。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
